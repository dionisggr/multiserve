swagger: '2.0'
info:
  title: Baseport
  version: '1.0.0'
  description:
    Baseport is a straightforward REST API with authentication written in JavaScript and using Docker, Express, Joi, Knex, Supabase and Passport.
    <br><br>
    [Visit the GitHub repository!](https://github.com/dionisggr/baseport)
produces:
  - application/json
paths:
  /:
    get:
      summary: Health Check
      tags:
        - Health
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              owner:
                type: string
                example: 'Dionis Gonzalez'
              ok:
                type: boolean
              message:
                type: string
                example: 'The world will not burn today.'
              API:
                type: 'string'
                example: 'healthy'
              auth:
                type: 'string'
                example: 'healthy'
              database:
                type: 'string'
                example: 'healthy'
        '500':
          description: Server error
  /apps:
    get:
      summary: Get all apps
      tags:
        - Admin
      parameters:   
        - in: body
          name: credentials
          description: Login credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  example: 'string'
                name:
                  type: string
                created_at:
                  type: string
                  format: date
                archived_at:
                  type: string
                  format: date
                logo:
                  type: string
                  example: 'string (URL)'
        '401':
          description: Unauthorized
  /apps/{id}:
    get:
      summary: Get app by ID
      tags:
        - Admin
      parameters:
        - in: path
          name: id
          description: App ID
          type: string
          required: true
        - in: body
          name: credentials
          description: Login credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              id:
                type: string
                example: 'string'
              name:
                type: string
              created_at:
                type: string
                format: date
              archived_at:
                type: string
                format: date
              logo:
                type: string
                example: 'string (URL)'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  /apps/{id}/register:
    post:
      summary: Create app user account
      tags:
        - Access
      parameters:
        - in: path
          name: id
          description: App ID
          type: string
          required: true              
        - in: header
          name: authorization
          description: API Key
          type: string
          required: true
          value: Bearer <API_KEY>
        - in: body
          name: info
          description: User information
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              first_name:
                type: string
              last_name:
                type: string
              email:
                type: string
              password:
                type: string
              is_admin:
                type: boolean
              created_at:
                type: string
                format: date
              updated_at:
                type: string
                format: date
              last_login:
                type: string
                format: date
              avatar:
                type: string
              app_id:
                type: string
      responses:
        '201':
          description: Created
          headers:
            conn.sid:
              description: 'Set-Cookie header with session ID after login'
              type: string
          schema:
            type: object
            properties:
              id:
                type: string
                example: 'string (hash)'
              username:
                type: string
              first_name:
                type: string
              last_name:
                type: string
              email:
                type: string
              is_admin:
                type: boolean
              created_at:
                type: string
                format: date
              updated_at:
                type: string
                format: date
              last_login:
                type: string
                format: date
              avatar:
                type: string
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /apps/{id}/login:
    post:
      summary: Login to app
      tags:
        - Access
      parameters:
        - in: path
          name: id
          description: App ID
          type: string
          required: true  
        - in: header
          name: authorization
          description: API Key
          type: string
          required: true
          value: Bearer <API_KEY>
        - in: body
          name: credentials
          description: Login credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        '200':
          description: OK
          headers:
            conn.sid:
              description: 'Set-Cookie header with session ID after login'
              type: string
        '401':
          description: Unauthorized
  /apps{id}/logout:
    post:
        summary: Logout from app
        tags:
          - Access
        parameters:
          - in: path
            name: id
            description: App ID
            type: string
            required: true  
          - in: header
            name: authorization
            description: API Key
            type: string
            required: true
            value: Bearer <API_KEY>
          - in: header
            name: cookie
            type: string
            required: true
            description: Authentication cookie from login
            value: conn.sid=abcdef1234567890
        responses:
          '200':
            description: OK - (Removes cookie from session)
          '401':
            description: Unauthorized
  /apps/{id}/users:
    get:
      summary: Get all users from app
      tags:
        - Admin
      parameters:
        - in: path
          name: id
          description: App ID
          type: string
          required: true
        - in: body
          name: credentials
          description: Login credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  example: 'string (hash)'
                username:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                is_admin:
                  type: boolean
                created_at:
                  type: string
                  format: date
                updated_at:
                  type: string
                  format: date
                last_login:
                  type: string
                  format: date
                avatar:
                  type: string
                  example: 'string (URL)'
        '401':
          description: Unauthorized
  /apps/{id}/users/{user_id}:
    get:
      summary: Get app user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          description: App ID
          type: string
          required: true
        - in: path
          name: user_id
          description: User ID
          type: string
          required: true
        - in: header
          name: authorization
          description: API Key
          type: string
          required: true
          value: Bearer <API_KEY>
        - in: header
          name: cookie
          type: string
          required: true
          description: Authentication cookie from login
          value: conn.sid=abcdef1234567890
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              id:
                type: string
                example: 'string (hash)'
              username:
                type: string
              first_name:
                type: string
              last_name:
                type: string
              email:
                type: string
              is_admin:
                type: boolean
              created_at:
                type: string
                format: date
              updated_at:
                type: string
                format: date
              last_login:
                type: string
                format: date
              avatar:
                type: string
                example: 'string (URL)'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    patch:
      summary: Update app user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          description: App ID
          type: string
          required: true  
        - in: path
          name: user_id
          description: User ID
          type: string
          required: true
        - in: header
          name: cookie
          type: string
          required: true
          description: Authentication cookie from login
          value: conn.sid=abcdef1234567890
        - in: header
          name: authorization
          description: API Key
          type: string
          required: true
          value: Bearer <API_KEY> 
      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              id:
                type: string
                example: 'string (hash)'
              username:
                type: string
              email:
                type: string
              password:
                type: string
                required: true
              is_admin:
                type: boolean
              created_at:
                type: string
                format: date
              updated_at:
                type: string
                format: date
              last_login:
                type: string
                format: date
              avatar:
                type: string
                example: 'string (URL)'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    delete:
      summary: Delete app user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          description: App ID
          type: string
          required: true  
        - in: path
          name: user_id
          description: User ID
          type: string
          required: true
        - in: header
          name: cookie
          type: string
          required: true
          description: Authentication cookie from login
          value: conn.sid=abcdef1234567890
        - in: header
          name: authorization
          description: API Key
          type: string
          required: true
          value: Bearer <API_KEY>
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  /apps/{id}/passwords/reset:
    post:
      summary: Reset user password
      tags:
        - 2FA
      parameters:
        - in: path
          name: id
          description: App ID
          type: string
          required: true  
        - in: body
          name: email
          description: Email
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
        - in: header
          name: authorization
          description: API Key
          type: string
          required: true
          value: Bearer <API_KEY>
      responses:
        '200':
          description: OK - (Sends 2FA code email)
        '401':
          description: Unauthorized
  /apps/{id}/passwords/verify:
    post:
      summary: Validate 2FA code 
      tags:
        - 2FA
      parameters:
        - in: path
          name: id
          description: App ID
          type: string
          required: true  
        - in: body
          name: email
          description: Email
          required: true
          schema:
            type: object
            properties:
              app_id:
                type: string
              email:
                type: string
              code:
                type: string
                pattern: '^[0-9]{6}$'
                description: 6-digit 2FA code
        - in: header
          name: authorization
          description: API Key
          type: string
          required: true
          value: Bearer <API_KEY>
      responses:
        '301':
          description: OK - (Redirects to /login)
        '401':
          description: Unauthorized
  /utils/{service}:
    get:
      summary: Generate data using a service
      tags:
        - Utils
      parameters:
        - in: path
          name: service
          type: string
          enum: [encrypt, hash]
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: string
            example: '<API_KEY>'
  /utils/{service}/{value}?:
    post:
      summary: Transform data using a service
      tags:
        - Utils
      parameters:
        - in: path
          name: service
          type: string
          enum: [encrypt, hash]
          value: hash
          required: true
        - in: path
          name: value
          type: string
        - in: body
          name: values
          schema:
            type: object
            properties:
              '[custom_key]':
                type: string
                example: 'random_value'
      responses:
        '200':
          description: OK
          schema:
            type: string
            example: '$2b$10$U6NOrsGLsGjPZ56AdfOyx.E1RzAD1Z.KMjZo3YX0Q.DJxrp1nVE7O'
  /secrets:
      get:
        summary: Get ENV vars
        tags:
          - Admin
        parameters:
          - in: body
            name: credentials
            description: Admin login credentials
            required: true
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        responses:
          '200':
            description: OK
            schema:
              type: string
              value: JSON<env_vars>
          '401':
            description: Unauthorized
